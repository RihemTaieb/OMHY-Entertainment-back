const express = require('express');
const nodemailer = require('nodemailer');
const dotenv = require('dotenv');
const NewsletterSubscriber = require('../models/NewsletterSubscriber'); // Assurez-vous que le mod√®le est bien import√©

dotenv.config(); // Charger les variables d'environnement

const router = express.Router();

// üîπ Configurer le transporteur SMTP pour IONOS
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST || "smtp.ionos.fr", // Serveur SMTP de IONOS
  port: parseInt(process.env.SMTP_PORT, 10) || 465, // Utiliser 465 (SSL) ou 587 (TLS)
  secure: process.env.SMTP_PORT == "465", // true pour SSL/TLS, false pour STARTTLS
  auth: {
    user: process.env.IONOS_EMAIL, // Adresse email IONOS
    pass: process.env.IONOS_PASSWORD, // Mot de passe IONOS
  },
});

// üîπ Route POST : Inscription √† la newsletter
router.post('/', async (req, res) => {
  const { email } = req.body;

  // V√©rifier si l'email est valide
  if (!email || !/^\S+@\S+\.\S+$/.test(email)) {
    return res.status(400).json({ error: 'Veuillez entrer une adresse email valide.' });
  }

  try {
    // V√©rifier si l'email est d√©j√† inscrit
    const existingSubscriber = await NewsletterSubscriber.findOne({ email });
    if (existingSubscriber) {
      return res.status(400).json({ error: 'Cet email est d√©j√† abonn√©.' });
    }

    // Ajouter un nouvel abonn√©
    const newSubscriber = new NewsletterSubscriber({ email });
    await newSubscriber.save();

    // Configurer l'email de confirmation
    const mailOptions = {
      from: `"OMHY FAMILY" <${process.env.IONOS_EMAIL}>`, // Nom affich√© + email
      to: email,
      subject: 'Confirmation d\'inscription √† la newsletter',
      text: `Bonjour,\n\nMerci de vous √™tre inscrit √† notre newsletter ! Restez inform√© de nos derni√®res actualit√©s.\n\nCordialement,\nOMHY FAMILY`,
      html: `
        <p><strong>Bonjour,</strong></p>
        <p>Merci de vous √™tre inscrit √† notre newsletter ! Restez inform√© de nos derni√®res actualit√©s.</p>
        <p>Cordialement,</p>
        <p><strong>OMHY FAMILY</strong></p>
      `,
    };

    // Envoyer l'email de confirmation
    await transporter.sendMail(mailOptions);

    res.status(200).json({ success: 'Merci pour votre inscription ! Un email de confirmation a √©t√© envoy√©.' });
  } catch (error) {
    console.error('Erreur lors de l\'inscription √† la newsletter :', error);
    res.status(500).json({ error: 'Une erreur est survenue. Veuillez r√©essayer plus tard.' });
  }
});

// üîπ Route GET : R√©cup√©rer la liste des abonn√©s
router.get('/', async (req, res) => {
  try {
    const subscribers = await NewsletterSubscriber.find();
    res.status(200).json(subscribers);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des abonn√©s :', error);
    res.status(500).json({ error: 'Une erreur est survenue.' });
  }
});

// üîπ Route DELETE : Supprimer un abonn√© par ID
router.delete('/:id', async (req, res) => {
  try {
    const deletedSubscriber = await NewsletterSubscriber.findByIdAndDelete(req.params.id);
    if (!deletedSubscriber) {
      return res.status(404).json({ error: "Abonn√© introuvable." });
    }
    res.status(200).json({ message: "Abonn√© supprim√© avec succ√®s." });
  } catch (error) {
    console.error('Erreur lors de la suppression de l\'abonn√© :', error);
    res.status(500).json({ error: "Impossible de supprimer l'abonn√©." });
  }
});

module.exports = router;
